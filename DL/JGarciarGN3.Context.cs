//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JGarciarGN3Entities : DbContext
    {
        public JGarciarGN3Entities()
            : base("name=JGarciarGN3Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Departamento> Departamentos { get; set; }
        public virtual DbSet<Empleado> Empleados { get; set; }
        public virtual DbSet<Sueldo> Sueldos { get; set; }
    
        public virtual int EmpleadoAdd(string nombreEmpleado, Nullable<System.DateTime> fechaIngreso, Nullable<int> idDepartamento, Nullable<System.DateTime> fechaNacimiento)
        {
            var nombreEmpleadoParameter = nombreEmpleado != null ?
                new ObjectParameter("NombreEmpleado", nombreEmpleado) :
                new ObjectParameter("NombreEmpleado", typeof(string));
    
            var fechaIngresoParameter = fechaIngreso.HasValue ?
                new ObjectParameter("FechaIngreso", fechaIngreso) :
                new ObjectParameter("FechaIngreso", typeof(System.DateTime));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmpleadoAdd", nombreEmpleadoParameter, fechaIngresoParameter, idDepartamentoParameter, fechaNacimientoParameter);
        }
    
        public virtual int EmpleadoDelete(Nullable<int> claveEmpleado)
        {
            var claveEmpleadoParameter = claveEmpleado.HasValue ?
                new ObjectParameter("claveEmpleado", claveEmpleado) :
                new ObjectParameter("claveEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmpleadoDelete", claveEmpleadoParameter);
        }
    
        public virtual ObjectResult<EmpleadoGetAll_Result> EmpleadoGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpleadoGetAll_Result>("EmpleadoGetAll");
        }
    
        public virtual ObjectResult<EmpleadoGetById_Result> EmpleadoGetById(Nullable<int> claveEmplado)
        {
            var claveEmpladoParameter = claveEmplado.HasValue ?
                new ObjectParameter("ClaveEmplado", claveEmplado) :
                new ObjectParameter("ClaveEmplado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpleadoGetById_Result>("EmpleadoGetById", claveEmpladoParameter);
        }
    
        public virtual int EmpleadoUpdate(Nullable<int> claveEmpleado, string nombreEmpleado, Nullable<System.DateTime> fechaIngreso, Nullable<int> idDepartamento, Nullable<System.DateTime> fechaNacimiento)
        {
            var claveEmpleadoParameter = claveEmpleado.HasValue ?
                new ObjectParameter("claveEmpleado", claveEmpleado) :
                new ObjectParameter("claveEmpleado", typeof(int));
    
            var nombreEmpleadoParameter = nombreEmpleado != null ?
                new ObjectParameter("NombreEmpleado", nombreEmpleado) :
                new ObjectParameter("NombreEmpleado", typeof(string));
    
            var fechaIngresoParameter = fechaIngreso.HasValue ?
                new ObjectParameter("FechaIngreso", fechaIngreso) :
                new ObjectParameter("FechaIngreso", typeof(System.DateTime));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmpleadoUpdate", claveEmpleadoParameter, nombreEmpleadoParameter, fechaIngresoParameter, idDepartamentoParameter, fechaNacimientoParameter);
        }
    
        public virtual ObjectResult<DepartamentosGetAll_Result> DepartamentosGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartamentosGetAll_Result>("DepartamentosGetAll");
        }
    
        public virtual int DepartamentoAdd(string descDepartamento)
        {
            var descDepartamentoParameter = descDepartamento != null ?
                new ObjectParameter("DescDepartamento", descDepartamento) :
                new ObjectParameter("DescDepartamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepartamentoAdd", descDepartamentoParameter);
        }
    
        public virtual int DepartamentoDelete(Nullable<int> iddepartamento)
        {
            var iddepartamentoParameter = iddepartamento.HasValue ?
                new ObjectParameter("iddepartamento", iddepartamento) :
                new ObjectParameter("iddepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepartamentoDelete", iddepartamentoParameter);
        }
    
        public virtual ObjectResult<DepartamentosGetById_Result> DepartamentosGetById(Nullable<int> idDepartamento)
        {
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("idDepartamento", idDepartamento) :
                new ObjectParameter("idDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartamentosGetById_Result>("DepartamentosGetById", idDepartamentoParameter);
        }
    
        public virtual int DepartamentoUpdate(Nullable<int> idDepartamento, string descDepartamento)
        {
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("idDepartamento", idDepartamento) :
                new ObjectParameter("idDepartamento", typeof(int));
    
            var descDepartamentoParameter = descDepartamento != null ?
                new ObjectParameter("descDepartamento", descDepartamento) :
                new ObjectParameter("descDepartamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepartamentoUpdate", idDepartamentoParameter, descDepartamentoParameter);
        }
    
        public virtual ObjectResult<EmpleadoDDL_Result> EmpleadoDDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpleadoDDL_Result>("EmpleadoDDL");
        }
    
        public virtual int SueldoAdd(Nullable<double> cantidad, string formaPago, Nullable<int> claveEmpleado)
        {
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            var formaPagoParameter = formaPago != null ?
                new ObjectParameter("formaPago", formaPago) :
                new ObjectParameter("formaPago", typeof(string));
    
            var claveEmpleadoParameter = claveEmpleado.HasValue ?
                new ObjectParameter("claveEmpleado", claveEmpleado) :
                new ObjectParameter("claveEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SueldoAdd", cantidadParameter, formaPagoParameter, claveEmpleadoParameter);
        }
    
        public virtual int SueldoDelete(Nullable<int> idSueldo)
        {
            var idSueldoParameter = idSueldo.HasValue ?
                new ObjectParameter("idSueldo", idSueldo) :
                new ObjectParameter("idSueldo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SueldoDelete", idSueldoParameter);
        }
    
        public virtual ObjectResult<SueldoGetAll_Result> SueldoGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SueldoGetAll_Result>("SueldoGetAll");
        }
    
        public virtual ObjectResult<SueldoGetById_Result> SueldoGetById(Nullable<int> idSueldo)
        {
            var idSueldoParameter = idSueldo.HasValue ?
                new ObjectParameter("idSueldo", idSueldo) :
                new ObjectParameter("idSueldo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SueldoGetById_Result>("SueldoGetById", idSueldoParameter);
        }
    
        public virtual int SueldoUpdate(Nullable<int> idsuelado, Nullable<double> cantidad, string formaPago, Nullable<int> claveEmpleado)
        {
            var idsueladoParameter = idsuelado.HasValue ?
                new ObjectParameter("idsuelado", idsuelado) :
                new ObjectParameter("idsuelado", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            var formaPagoParameter = formaPago != null ?
                new ObjectParameter("formaPago", formaPago) :
                new ObjectParameter("formaPago", typeof(string));
    
            var claveEmpleadoParameter = claveEmpleado.HasValue ?
                new ObjectParameter("claveEmpleado", claveEmpleado) :
                new ObjectParameter("claveEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SueldoUpdate", idsueladoParameter, cantidadParameter, formaPagoParameter, claveEmpleadoParameter);
        }
    }
}
